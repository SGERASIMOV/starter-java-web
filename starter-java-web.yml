application:
  configuration:
    input.lb-bucket: http://roundrobin:80
    input.app-fork: qubell
    input.app-branch: HEAD #red, master
    input.app-quantity: "1"

  bindings:
    - [main.workflow, db]
    - [main.workflow, app]
    - [main.workflow, lb]

  interfaces:
    input:
      app-fork: "bind(main.workflow#input.app-fork)"
      app-branch: "bind(main.workflow#input.app-branch)"
      lb-bucket: "bind(main.workflow#input.lb-bucket)"
      app-quantity: "bind(app#input.quantity)"
    endpoints:
      lb: "bind(lb#output.lb-stats)"
      app: "bind(app#output.app-hosts)"
      db: "bind(db#output.dbms)"
      entry: "bind(main.workflow#result.entry-url)"

  components:
    main:
      components:
        workflow:
          type: workflow.Instance
          interfaces:
            input:
              scm-provider: configuration(string)
              app-fork: configuration(string)
              app-branch: configuration(string)
              lb-bucket: configuration(string)
              #as constants
              db-sql-url: configuration(list<string>)
              db-user: configuration(string)
              db-password: configuration(string)
              privileges: configuration(list<string>)
              lib-uri: configuration(list<string>)
              lbstats-stats-user: configuration(string)
              lbstats-stats-pass: configuration(string)
              lbstats-stats-port: configuration(string)
              lbstats-stats-url: configuration(string)
            db-info:
              dbms: consume-signal(object)
              db-host: consume-signal(string)
              db-port: consume-signal(int)
            db-manage:
              schema: send-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
              file-query: send-command(object connection, list<string> sql-url)
            app-manage:
              build-app: send-command(string scm-provider, string git-uri, string app-branch)
              deploy-libs: send-command(list<string> lib-uri)
              deploy-war: send-command(string war-uri, object context-attrs, object context-nodes)
            app-output:
              app-hosts: consume-signal(list<string>)
              app-port: consume-signal(string)
            lb-manage:
              add-servers: send-command(list<string> app-hosts, string app-port, string lb-bucket => string entry-url)
              reconfigure-servers: send-command(list<string> app-hosts, string app-port, string lb-bucket)
            result:
              entry-url: publish-signal(string)

          required: [db-manage, app-manage, lb-manage, db-info, app-output]
          configuration:
            #Oracle
            #input.db-sql-url: ["https://dl.dropboxusercontent.com/u/250836/petclinic-oracle-schema.sql", "https://dl.dropboxusercontent.com/u/250836/petclinic-oracle-dataload.sql"]
            #MySQL
            input.db-sql-url: ["https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-schema.sql", "https://raw.github.com/qubell-bazaar/component-petclinic/master/sql/petclinic-mysql-dataload.sql"]
            input.db-user: petclinic #const
            input.db-password: petclinic #const
            input.privileges: ["all"] #const
            input.scm-provider: git #const
            input.lib-uri: ["http://repo1.maven.org/maven2/org/apache/tomcat/dbcp/6.0.26/dbcp-6.0.26.jar", "http://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar", "https://dl.dropboxusercontent.com/u/250836/ojdbc6.jar"]
            input.lbstats-stats-user: admin
            input.lbstats-stats-pass: pa55w0rd
            input.lbstats-stats-port: "1926"
            input.lbstats-stats-url: "/admin?stats"

            configuration.triggers:
              app-output.app-hosts: app-scale
              input.app-fork: rebuild-app
              input.app-branch: rebuild-app

            configuration.propagateStatus: [ app-scale, rebuild-app ]

            configuration.workflows:
              launch:
                parameters:
                  - db-user:
                      description: user for new database
                  - db-password:
                      description: user password for new database
                  - privileges:
                      description: user privileges for new database
                  - db-sql-url:
                      description: sql url
                  - scm-provider:
                      description: "Source provider (Git or SVN)"
                  - app-fork:
                      description: git fork
                  - app-branch:
                      description: git branch
                  - lib-uri:
                      description: URI to additional app libs
                  - war-uri:
                      description: URI to app 
                  - lbstats-stats-user:
                      description: lb statistic user
                  - lbstats-stats-pass:
                      description: lb statistic user's password 
                  - lbstats-stats-port:
                      description: lb statistic port
                  - lbstats-stats-url:
                      description: lb statistic's url
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - manage-schema:
                      action: serviceCall
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 300
                        service: db-manage
                        command: schema
                        arguments:
                          db-user: "{$.db-user}"
                          db-user-password: "{$.db-password}"
                          db-user-privileges: "{$.privileges}"
                      output:
                        con: result
                  - upload-sql:
                      action: serviceCall
                      precedingPhases: [ manage-schema ]
                      parameters:
                        timeout: 300
                        service: db-manage
                        command: file-query
                        arguments:
                          connection: "{$.con.connection}"
                          sql-url: "{$.db-sql-url}"
                  - build-app:
                      action: serviceCall
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                          app-branch: "{$.app-branch}"
            	      output:
                         warlist: result
		 - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: serviceCall
                      phase: deploy-war
                      precedingPhases: [ upload-sql, build-app, deploy-libs ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-war
                        arguments:
                          war-uri: "{$.warlist.wars[0]}"
                          context-attrs: {
                            "docBase": "{$.warlist.wars[0]}",
                            "path": "/",
                            "debug": "5",
                            "reloadable": "true",
                            "crossContext": "true",
                            "allowLinking": "true"
                          }
                          context-nodes:
                            - Environments: {
                                "name": "appEnvironment",
                                "value": "_default",
                                "type": "java.lang.String",
                                "override": "false"
                            }
                            - Resource: {
                                "name": "jdbc/datasource",
                                "auth": "Container",
                                "type": "{$.con.connection.db-dstype}",
                                "maxActive": "8",
                                "maxIdle": "8",
                                "maxWait": "-1",
                                "username": "{$.con.connection.db-user}",
                                "password": "{$.con.connection.db-user-password}",
                                "driverClassName": "{$.con.connection.db-driver}",
                                "url": "{$.con.connection.connection-url}",
                                "validationQuery": "{$.con.connection.validation-query}",
                                "testOnReturn": "true",
                                "testWhileIdle": "true"
                            }

                  - lb-add-server:
                      action: serviceCall
                      precedingPhases: [ deploy-war ]
                      phase: lb-add-server
                      parameters:
                        timeout: 300
                        service: lb-manage
                        command: add-servers
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          app-port: "{$.props.app-output.app-port}"
                          lb-bucket: "http://roundrobin:80/"
                      output:
                        result-lb: result
                          #todo move lb-bucket to launch param
                return:
                  entry-url:
                    value: "{$.result-lb.entry-url}"
              app-scale:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - build-app:
                      action: serviceCall
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                          app-branch: "{$.app-branch}"
                      output:
                        warlist: result
		  - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: serviceCall
                      precedingPhases: [ build-app, deploy-libs ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-war
                        arguments:
                          war-uri: "{$.warlist.wars[0]}"
                          context-attrs: {
                            "docBase": "{$.warlist.wars[0]}",
                            "path": "/",
                            "debug": "5",
                            "reloadable": "true",
                            "crossContext": "true",
                            "allowLinking": "true"
                          }
                          context-nodes:
                            - Environments: {
                                "name": "appEnvironment",
                                "value": "_default",
                                "type": "java.lang.String",
                                "override": "false"
                            }
                            - Resource: {
                                "name": "jdbc/datasource",
                                "auth": "Container",
                                "type": "{$.con.connection.db-dstype}",
                                "maxActive": "8",
                                "maxIdle": "8",
                                "maxWait": "-1",
                                "username": "{$.con.connection.db-user}",
                                "password": "{$.con.connection.db-user-password}",
                                "driverClassName": "{$.con.connection.db-driver}",
                                "url": "{$.con.connection.connection-url}",
                                "validationQuery": "{$.con.connection.validation-query}",
                                "testOnReturn": "true",
                                "testWhileIdle": "true"
                            }
                  - lb-reconfigure-servers:
                      action: serviceCall
                      precedingPhases: [ deploy-war ]
                      phase: lb-reconfigure-servers
                      parameters:
                        timeout: 600
                        service: lb-manage
                        command: reconfigure-servers
                        arguments:
                          app-hosts: "{$.props.app-output.app-hosts}"
                          app-port: "{$.props.app-output.app-port}"
                          lb-bucket: "http://roundrobin:80/"

              rebuild-app:
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result
                  - build-app:
                      action: serviceCall
                      precedingPhases: [ get-env-props ]
                      parameters:
                        timeout: 600
                        service: app-manage
                        command: build-app
                        arguments:
                          scm-provider: "{$.scm-provider}"
                          git-uri: "git://github.com/{$.app-fork}/starter-java-web.git"
                          app-branch: "{$.app-branch}"
                      output:
                          warlist: result
		  - deploy-libs:
                      action: serviceCall
                      phase: deploy-libs
                      precedingPhases: [ get-env-props, build-app ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-libs
                        arguments:
                          lib-uri: "{$.lib-uri}"
                  - deploy-war:
                      action: serviceCall
                      precedingPhases: [ build-app ]
                      parameters:
                        timeout: 300
                        service: app-manage
                        command: deploy-war
                        arguments:
                          war-uri: "{$.warlist.wars[0]}"
                          context-attrs: {
                            "docBase": "{$.warlist.wars[0]}",
                            "path": "/",
                            "debug": "5",
                            "reloadable": "true",
                            "crossContext": "true",
                            "allowLinking": "true"
                          }
                          context-nodes:
                            - Environments: {
                                "name": "appEnvironment",
                                "value": "_default",
                                "type": "java.lang.String",
                                "override": "false"
                            }
                            - Resource: {
                                "name": "jdbc/datasource",
                                "auth": "Container",
                                "type": "{$.con.connection.db-dstype}",
                                "maxActive": "8",
                                "maxIdle": "8",
                                "maxWait": "-1",
                                "username": "{$.con.connection.db-user}",
                                "password": "{$.con.connection.db-user-password}",
                                "driverClassName": "{$.con.connection.db-driver}",
                                "url": "{$.con.connection.connection-url}",
                                "validationQuery": "{$.con.connection.validation-query}",
                                "testOnReturn": "true",
                                "testWhileIdle": "true"
                            }

    db:
      type: reference.Submodule
      configuration:
        #__locator.application-id: "MySQL Server"
        #__locator.application-id: "Oracle DBxe"
        __locator.application-id: "Database"
      interfaces:
        input:
          db-port: configuration(int)
          db-root-password: configuration(string)
          image: configuration(string)
          image-user: configuration(string)
          instance-size: configuration(string)
          recipe-url: configuration(string)
        manage:
          schema: receive-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
          file-query: receive-command(list<string> sql-url, object connection)
        output:
          dbms: publish-signal(object)
          db-host: publish-signal(string)
          db-port: publish-signal(int)

    app:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Application Server"
      interfaces:
        input:
          quantity: configuration(string)
        management:
          build-app: receive-command(string scm-provider, string git-uri, string app-branch)
          deploy-libs: receive-command(list<string> lib-uri)
          deploy-war: receive-command(string war-uri, object context-attrs, object context-nodes)
        output:
          app-hosts: publish-signal(list<string>)
          app-port: publish-signal(string)

    lb:
      type: reference.Submodule
      configuration:
        __locator.application-id: "Load Balancer"
      interfaces:
        input:
          stats-user: configuration(string)
          stats-pass: configuration(string)
          stats-port: configuration(string)
          stats-url: configuration(string)
        lb-manage:
          add-servers: receive-command(list<string> app-hosts, string app-port, string lb-bucket => string entry-url)
          reconfigure-servers: receive-command(list<string> app-hosts, string app-port, string lb-bucket)
        output:
          lb-stats: publish-signal(object)
